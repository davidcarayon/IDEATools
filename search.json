[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2020 David Carayon  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. IDEATools Copyright (C) 2023 David Carayon This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/colored_trees.html","id":"new-version-starting-with-ideatools-3-0-0","dir":"Articles","previous_headings":"","what":"New version (starting with IDEATools 3.0.0)","title":"About the colored property trees","text":"Instead using SVG RAW code (tricky one needed modify elements), new approach using {ggplot2} package (along {ggtext} extension) developped.  approach based simple reproducible ggplot syntax based reference dataframes containing coordinates lines boxes (nodes) stored package internal data can exported computer using :","code":"IDEATools:::show_tree_structure(\"my_directory\")"},{"path":"/articles/colored_trees.html","id":"how-can-i-modify-translate-the-colored-trees","dir":"Articles","previous_headings":"New version (starting with IDEATools 3.0.0)","what":"How can I modify / translate the colored trees ?","title":"About the colored property trees","text":"node labels used source code produces colored trees found another internal object, reference_list, list gathering several tibbles reference info. modifying name attribute $indic_dim, $indic_prop $properties_nodes, can translate colored trees produced.","code":""},{"path":"/articles/colored_trees.html","id":"previous-version","dir":"Articles","previous_headings":"","what":"Previous version","title":"About the colored property trees","text":"algorithm producing colored trees result long work involving testing many methods R packages. first solution chosen draw models “white” vectorial drawing software (Inkscape) svg format. SVG markup language (similar XML HTML) fairly easy apply search replace algorithms. rectangle tag (corresponding node illuminated tree) can written : find tag rectangle, assign rectangle identifier corresponding indicator, can search-replace argument “fill:#ffffff” appropriate color corresponding evaluation :  IDEATools converted modified SVG source code proper PNG/PDF image using rsvg library. templates stored internal object R named “canvas”. list containing element complete SVG source code template.","code":"<rect        style=\"fill:#ffffff;fill-opacity:1;stroke:#001800;stroke-width:0.1\"        id=\"rect2-16\"        width=\"17.833706\"        height=\"4.9643545\"        x=\"370.30774\"        y=\"143.9761\"        inkscape:label=\"#rect2-16\" />"},{"path":"/articles/decision_rules.html","id":"decision-rules-for-the-dimensions-approach","dir":"Articles","previous_headings":"","what":"Decision rules for the Dimensions approach","title":"About decision rules","text":"majority cases, indicator value can obtained sum items related indicator. However, exceptions :","code":""},{"path":"/articles/decision_rules.html","id":"decision-rules-for-the-properties-approach","dir":"Articles","previous_headings":"","what":"Decision rules for the Properties approach","title":"About decision rules","text":"properties approach, decision rules 46 data frames giving evaluation node depending previous leaves nodes, named pattern “node_xx”, based numeration heuristic tree :","code":""},{"path":"/articles/utils.html","id":"jsonify","dir":"Articles","previous_headings":"","what":"jsonify()","title":"Utility functions developed in this package","text":"(-exported) helper function developped produce JSON data file excel IDEA data input file (older 2019-06-01). function needs input, either folder single file, output directory save produced JSON files. function can helpfull users aren’t able use VBA macro developed excel IDEA data file.","code":"IDEATools:::jsonify(input = \"input_directory\", output = \"output_directory\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Carayon. Author, maintainer, copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Carayon D (2023). IDEATools: Individual Group Farm Sustainability Assessments using IDEA4 Method. R package version 3.5.2,  https://github.com/davidcarayon/IDEATools, https://davidcarayon.github.io/IDEATools/index.html.","code":"@Manual{,   title = {IDEATools: Individual and Group Farm Sustainability Assessments using the IDEA4 Method},   author = {David Carayon},   year = {2023},   note = {R package version 3.5.2,  https://github.com/davidcarayon/IDEATools},   url = {https://davidcarayon.github.io/IDEATools/index.html}, }"},{"path":"/index.html","id":"ideatools-","dir":"","previous_headings":"","what":"Individual and Group Farm Sustainability Assessments using the IDEA4 Method","title":"Individual and Group Farm Sustainability Assessments using the IDEA4 Method","text":"IDEATools est un package R dédié à la méthode IDEA4, visant à fournir aux utilisateurs des outils pour le traitement, l’automatisation et le reporting de diagnostics IDEA.","code":""},{"path":"/index.html","id":"installation--prérequis","dir":"","previous_headings":"","what":"Installation & Prérequis","title":"Individual and Group Farm Sustainability Assessments using the IDEA4 Method","text":"🎉 IDEATools est maintenant officiellement sur le cran 🎉 Vous pouvez toujours installer la dernière version en cours de développement : NB : Le logiciel RTools est parfois nécessaire sur les machines Windows pour l’installation de la version en cours de développement. Vous pouvez l’installer ici : Rtools Une fois installé, vous pouvez charger le package avec :","code":"install.packages(\"IDEATools\") install.packages(\"remotes\") remotes::install_github(\"davidcarayon/IDEATools\") library(IDEATools)"},{"path":"/index.html","id":"prérequis-pour-la-production-de-rapports","dir":"","previous_headings":"","what":"Prérequis pour la production de rapports","title":"Individual and Group Farm Sustainability Assessments using the IDEA4 Method","text":"Pour la production de rapport PDF, une installation de LaTeX est requise. Si vous n’avez jamais utilisé LaTeX, vous pouvez utiliser la fonction tinytex::install_tinytex() pour installer une version minimale de LaTeX vous permettant d’éditer des rapports au format PDF en utilisant le package IDEATools. Une fois installé, vous n’avez plus besoin de vous soucier de LaTeX (opération à réaliser seulement lors de la première utilisation). Les rapports PDF utilisent (et nécessitent donc impérativement) la police Helvetica. Il est donc important de l’avoir installée sur votre machine.","code":""},{"path":"/index.html","id":"utilisation-simplifiée","dir":"","previous_headings":"","what":"Utilisation simplifiée","title":"Individual and Group Farm Sustainability Assessments using the IDEA4 Method","text":"Une interface graphique utilisateur (GUI) est proposée pour les plus néophytes et permet l’utilisation d’IDEATools en presse-bouton. Il suffit simplement d’utiliser la fonction : Une interface va alors s’ouvrir et proposer 3 différents modules : Analyses individuelles (1 seul calculateur) Analyses de groupe (>= 3 calculateurs, maintenir MAJ pour sélectionner plusieurs calculateurs) Un module intitulé jsonify2() qui permet de convertir un calculateur excel IDEA en un fichier JSON, notamment utilisé par le WEBIDEA, dans le cas où la macro excel du calculateur ne fonctionnerait pas.  Pour des analyses plus poussées, pour automatiser par exemple plusieurs diagnostics individuels (.e. du multi-individuel), les sections ci-dessous détaillent l’utilisation plus classique du package.","code":"runGUI()"},{"path":"/index.html","id":"utilisation-classique","dir":"","previous_headings":"","what":"Utilisation classique","title":"Individual and Group Farm Sustainability Assessments using the IDEA4 Method","text":"Au total, 5 fonctions ou “modules” ont été développés dans ce package, allant de l’import des données d’un calculateur à la production de graphiques puis à la productions de produits de reporting (PDF, Excel, etc.) : read_idea() : Permet d’identifier la validité du fichier d’entrée et d’en extraire métadonnées et items. compute_idea() : Calcule les indicateurs/composantes/dimensions/propriétés à partir des items old_idea() : Alternative aux deux fonctions précédentes si le calculateur est trop ancien (vise les indicateurs plutôt que les items) plot_idea() : Produit les graphiques dimensions / propriétés write_idea() : Export des graphiques sous forme brute ou sous forme de rapports aux formats variés. Afin de simplifier l’utilisation du package, une fonction globale diag_idea() été développée. Grâce à cette fonction, selon la saisie de l’utilisateur, les modules d’IDEATools vont être appelés séquentiellement afin de produire les résultats demandés. L’utilisateur peut notamment paramétrer : Le fichier/dossier d’entrée des données input Le dossier de sortie des résultats output_directory Le type d’analyse (individuelle ou de groupe) type Le type de sorties (rapport et/ou graphiques bruts) export_type Le types de graphiques qu’il souhaite (dans le cas d’un export brut) plot_choices Le format de sortie du rapport si désiré (au choix : pdf, docx, pptx, xlsx) report_format Le préfixe à rajouter aux fichiers de sortie (ex : le nom de la ferme) dans le cas d’une analyse individuelle prefix La résolution de sortie des graphiques (impacte notamment le poids des sorties) dpi Si l’algorithme doit afficher sa progression dans la console. quiet (nouveau) Dans le cas particulier ou un calculateur au format .xlsx est inséré et qu’un rapport individuel au format xlsx est demandé, append paramétré en TRUE permet de coller les onglets de résultats à la suite des onglets du calculateur initial, créant ainsi un calculateur “tout en un” avec données + résultats. Voici un appel complet à la fonction diag_idea() avec toutes les possibilités de paramétrage : Pour information, les utilisateurs les moins habitués à l’écosystème R peuvent utiliser les commandes suivantes (à condition d’utiliser RStudio) pour sélectionner les dossier/fichiers via une fenêtre en presse-bouton: distingue 3 grands types de diagnostics :","code":"diag_idea(input,   output_directory,   type = c(\"single\", \"group\"),   export_type = c(\"report\", \"local\", NULL),   plot_choices = c(\"dimensions\", \"trees\", \"radars\"),   report_format = c(\"pdf\", \"docx\", \"xlsx\", \"pptx\"),   prefix = \"EA\",   dpi = 300,   quiet = FALSE,   append = FALSE ) input <- rstudioapi::selectDirectory() # Dans le cas d'un répertoire # OU input <- rstudioapi::selectFile() # Si un seul calculateur  output_directory <- rstudioapi::selectDirectory()"},{"path":"/index.html","id":"les-analyses-individuelles","dir":"","previous_headings":"","what":"Les analyses individuelles","title":"Individual and Group Farm Sustainability Assessments using the IDEA4 Method","text":"En premier lieu, l’utilisateur peut avoir besoin d’un diagnostic pour une seule ferme. Prennons ici l’exemple d’utilisateur qui souhaite récupérer ses résultats pour sa ferme, mais uniquement ses arbres éclairés. Le code sera alors :","code":"diag_idea(   input = \"chemin_calculateur\",   output_directory = \"mes_resultats\",   type = \"single\",   export_type = \"local\",   prefix = \"MaFerme\",   plot_choices = \"trees\",   quiet = FALSE )"},{"path":"/index.html","id":"les-analyses-multi-individuelles","dir":"","previous_headings":"","what":"Les analyses multi-individuelles","title":"Individual and Group Farm Sustainability Assessments using the IDEA4 Method","text":"Ensuite, certains utilisateurs ont besoin de traiter plusieurs calculateurs en même temps. Ici par exemple, l’utilisateur n’pas besoin des figures “brutes”, mais juste besoin pour chaque exploitation d’un rapport au format word qu’il pourra commenter ainsi qu’une présentation powerpoint contenant toutes les figures et prête à projeter. Le code sera alors :","code":"diag_idea(   input = \"chemin_vers_dossier\",   output_directory = \"mes_resultats\",   type = \"single\",   export_type = \"report\",   report_format = c(\"docx\", \"pptx\"),   quiet = FALSE )"},{"path":"/index.html","id":"les-analyses-de-groupe","dir":"","previous_headings":"","what":"Les analyses de groupe","title":"Individual and Group Farm Sustainability Assessments using the IDEA4 Method","text":"Enfin, certains utilisateurs souhaitent traiter un ensemble de calculateurs en même temps et ont besoin d’avoir une vision globale sur le groupe. Dans cet exemple, l’utilisateur va donc demander à la fois des graphiques bruts, mais aussi des rapports prêts à être imprimés (PDF) ainsi qu’un support excel qu’il pourra re-traiter à sa guise pour son analyse de group. Le code sera alors : Notons qu’il peut demander, en plus de son analyse de groupe, des rapports individuels qu’il pourra donner à chaque exploitation (par exemple au format Microsoft Word) :","code":"diag_idea(   input = \"chemin_vers_dossier\",   output_directory = \"mes_resultats\",   type = \"group\",   export_type = c(\"report\", \"local\"),   report_format = c(\"pdf\", \"xlsx\"),   quiet = FALSE ) diag_idea(   input = \"chemin_vers_dossier\",   output_directory = \"mes_resultats\",   type = c(\"group\", \"single\"),   export_type = c(\"report\"),   report_format = c(\"docx\"),   quiet = FALSE )"},{"path":"/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Individual and Group Farm Sustainability Assessments using the IDEA4 Method","text":"   📧 Email   |   💬 Twitter   |   👔 LinkedIn","code":""},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Individual and Group Farm Sustainability Assessments using the IDEA4 Method","text":"Carayon D (2023). IDEATools: Individual Group Farm Sustainability Assessments using IDEA4 Method. R package version 3.4.1, https://CRAN.R-project.org/package=IDEATools. BibTeX entry LaTeX users ","code":"@Manual{,     title = {IDEATools: Individual and Group Farm Sustainability Assessments using the IDEA4 Method},     author = {David Carayon},     year = {2023},     note = {R package version 3.4.1},     url = {https://CRAN.R-project.org/package=IDEATools},   }"},{"path":"/reference/compute_idea.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute IDEA4 indicators and aggregation metrics — compute_idea","title":"Compute IDEA4 indicators and aggregation metrics — compute_idea","text":"Aggregates items read_idea() produce IDEA4 indicators, components, dimensions properties.","code":""},{"path":"/reference/compute_idea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute IDEA4 indicators and aggregation metrics — compute_idea","text":"","code":"compute_idea(data)"},{"path":"/reference/compute_idea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute IDEA4 indicators and aggregation metrics — compute_idea","text":"data object class IDEA_items produced read_idea()","code":""},{"path":"/reference/compute_idea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute IDEA4 indicators and aggregation metrics — compute_idea","text":"object class \"IDEA_data\" three attributes : metadata named list containing 17 metadata entries farm dataset tibble containing score computed 53 indicators, 13 components 3 dimensions nodes list tibbles, one per property plus global one, describe qualitative evaluation obtained leaf/node final property.","code":""},{"path":"/reference/compute_idea.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute IDEA4 indicators and aggregation metrics — compute_idea","text":"function designed compute IDEA scores dimensions properties approaches. copy decision rules used properties approach can locally exported excel file : IDEATools::show_decision_rules() information decision rules can found vignette : vignette(\"decision_rules\", package = \"IDEATools\")","code":""},{"path":"/reference/compute_idea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute IDEA4 indicators and aggregation metrics — compute_idea","text":"","code":"library(IDEATools) path <- system.file(\"example_data/idea_example_1.json\", package = \"IDEATools\") my_data <- read_idea(path) computed_data <- compute_idea(my_data)"},{"path":"/reference/diag_idea.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a complete IDEA4 diagnosis — diag_idea","title":"Run a complete IDEA4 diagnosis — diag_idea","text":"wrapper function designed compute complete IDEA4 diagnosis single function. According user's input, functions IDEATools sequentially called produce desired output.","code":""},{"path":"/reference/diag_idea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a complete IDEA4 diagnosis — diag_idea","text":"","code":"diag_idea(   input,   output_directory,   type = \"single\",   export_type = c(\"report\", \"local\"),   plot_choices = c(\"dimensions\", \"trees\", \"radars\"),   report_format = \"pdf\",   prefix = NULL,   dpi = 320,   append = FALSE,   quiet = FALSE )"},{"path":"/reference/diag_idea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a complete IDEA4 diagnosis — diag_idea","text":"input character vector path names single file, multiple files even directory IDEA data. File extensions can either json xls(x) output_directory output directory rendered reports /plots. Defaults \"IDEATools_output\" type type analysis perform. Can \"single\" single farm-related results, \"group\" group-related results, \"group_reference\" anonymous group-related results, combination latter, provided number farms least 3. Note \"group_reference\" special option designed work online platform using package (WEBIDEA) export_type type output produce. Can either \"report\" produce compiled reports /\"local\" write raw plots. NULL, algorithm produce plots machine return list IDEA results. plot_choices type plots produced. Can either \"dimensions\", \"trees\" \"radars\" combination 3. Ignored export type \"report\". report_format string indicating output format type = \"report\". Can single format (e.g \"pdf\") multiple formats (e.g. c(\"pdf\",\"xlsx\")). Possible formats \"pdf\", \"docx\", \"pptx\" \"xlsx\" prefix prefix added output files names. Typically, name farm. Ignored length(input) > 1 case group analysis : metadata$MTD_01 field used identify farm. dpi ggplot output resolution. append case single excel report input xlsx file, results appended original file ? quiet command remove console printing.","code":""},{"path":"/reference/diag_idea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a complete IDEA4 diagnosis — diag_idea","text":"Either reports /raw plots output_directory named list results.","code":""},{"path":"/reference/diag_idea.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run a complete IDEA4 diagnosis — diag_idea","text":"function designed provide user single function use full IDEA4 diagnosis. input single file, simple \"read_idea() |> compute_idea() |> plot_idea() |> write_idea()\" \"old_idea() |> plot_idea() |> write_idea()\" pipeline used. export_type NULL, output plot_idea() returned. input list files /directory, type \"single\", single analysis pipelines iterated file. export_type NULL, multiple outputs plot_idea() gathered unique list returned. input list files /directory, type \"group*\", \"import\" (read_idea() |> compute_idea() old_idea()) pipeline iterated file results gathered object class \"IDEA_group_data\". object introduced plot_idea() |> write_idea() pipeline trigger new algorithm suited group analysis. export_type NULL, output plot_idea() returned.","code":""},{"path":"/reference/diag_idea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a complete IDEA4 diagnosis — diag_idea","text":"","code":"library(IDEATools) path <- system.file(\"example_data/idea_example_1.json\", package = \"IDEATools\") group_path <- system.file(\"example_data\", package = \"IDEATools\")  # Find your temporary directory (the output will be there) tempdir <- tempdir()  # Run a full individual diagnosis with no export, with only trees my_diagnosis <- diag_idea(   input = path,   output_directory = tempdir,   type = \"single\",   export_type = NULL,   prefix = \"Farm_A\",   plot_choices = \"trees\",   dpi = 20,  ## Can be much higher   quiet = TRUE )"},{"path":"/reference/jsonify2.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert IDEA excel files to json, without output — jsonify2","title":"Convert IDEA excel files to json, without output — jsonify2","text":"Convert IDEA excel files json, without output","code":""},{"path":"/reference/jsonify2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert IDEA excel files to json, without output — jsonify2","text":"","code":"jsonify2(input, output)"},{"path":"/reference/jsonify2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert IDEA excel files to json, without output — jsonify2","text":"input directory containing xls/xlsx files convert output directory json files created","code":""},{"path":"/reference/jsonify2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert IDEA excel files to json, without output — jsonify2","text":"list json files exported output directory","code":""},{"path":"/reference/old_idea.html","id":null,"dir":"Reference","previous_headings":"","what":"Read ","title":"Read ","text":"function alternative read/compute pipeline older versions IDEA data excel files.","code":""},{"path":"/reference/old_idea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read ","text":"","code":"old_idea(input)"},{"path":"/reference/old_idea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read ","text":"input system path file containing IDEA data. file extension xls xlsx.","code":""},{"path":"/reference/old_idea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read ","text":"object class \"IDEA_data\" three attributes : metadata named list containing 17 metadata entries farm dataset tibble containing score computed 53 indicators, 13 components 3 dimensions nodes list tibbles, one per property plus global one, describe qualitative evaluation","code":""},{"path":"/reference/old_idea.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read ","text":"function designed import data \"old\" IDEA data files. probably work IDEA4 excel files later 2019-01-01. actually works function focuses indicators directly computed excel file rather items. potential drawbacks information items collected metadata may missed. Note : farm id metadata, full First/Last name used found.","code":""},{"path":"/reference/old_idea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read ","text":"","code":"library(IDEATools)  ## Importing from an old IDEA file input <- \"path_to_your_old_file.xlsx\" if(file.exists(input)) { computed_data <- old_idea(input) }"},{"path":"/reference/plot_idea.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot IDEA4 results — plot_idea","title":"Plot IDEA4 results — plot_idea","text":"Produces ggplots /SVG source code IDEA data produced either compute_idea() old_idea() call.","code":""},{"path":"/reference/plot_idea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot IDEA4 results — plot_idea","text":"","code":"plot_idea(IDEA_data, choices = c(\"dimensions\", \"trees\", \"radars\"))"},{"path":"/reference/plot_idea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot IDEA4 results — plot_idea","text":"IDEA_data IDEA_data IDEA_group_data object choices type plots produced ? Can either \"dimensions\", \"trees\" \"radars\" combination 3. Ignored IDEA_data class IDEA_group_data.","code":""},{"path":"/reference/plot_idea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot IDEA4 results — plot_idea","text":"named list plots class IDEA_plots IDEA_group_plots. algorithm also adds \"data\" attribute containing data introduced input function.","code":""},{"path":"/reference/plot_idea.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot IDEA4 results — plot_idea","text":"function produce different plots depending whether input data class IDEA_data IDEA_group_data. IDEA_data class implies data comes individual analysis pipeline, individual plots produced according user's choices specified function call : dimensions option produce histograms dimensions, components, indicators along polarised synthetic representation components. trees option produce colored trees describing qualitative agregation property approach. radars option produce polarised histograms (also called 'radars') giving score (%) indicator, grouped property Important note : 3 types plots required \"report\" option write_idea() function. IDEA_group_data class can generated \"diag_idea()\" group call iterate either \"read_idea() |> compute_idea()\" \"old_idea()\" data file aggregating results assigning grouped class. IDEA_group_data class implies data comes group analysis pipeline, choices argument ignored. plots produced dimension approach almost individual analysis pipeline histograms replaced boxplots. Concerning properties, visualization currently considered relevant matrix (heatmap) properties * farms, cells colored according qualitative evaluation farm given property. Note plots using \"theme_idea()\" theme defined package. copy blank canvas used colored trees can locally exported svg files : IDEATools::show_canvas() information colored trees ans canvas can found vignette : vignette(\"colored_trees\", package = \"IDEATools\")","code":""},{"path":"/reference/plot_idea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot IDEA4 results — plot_idea","text":"","code":"library(IDEATools)  ## Example given for a single analysis. See diag_idea() for a group analysis. path <- system.file(\"example_data/idea_example_1.json\", package = \"IDEATools\") my_data <- read_idea(path) computed_data <- compute_idea(my_data)  ## Example without radars or dimensions idea_plots <- plot_idea(computed_data, choices = c(\"trees\"))"},{"path":"/reference/read_idea.html","id":null,"dir":"Reference","previous_headings":"","what":"Read IDEA4 items and metadata — read_idea","title":"Read IDEA4 items and metadata — read_idea","text":"Reads imports items farm metadata .xls, .xlsx .json files containing IDEA4 data.","code":""},{"path":"/reference/read_idea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read IDEA4 items and metadata — read_idea","text":"","code":"read_idea(input)"},{"path":"/reference/read_idea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read IDEA4 items and metadata — read_idea","text":"input system path file containing IDEA data. file extension can either json xls(x). latter, version number must >= 4.2.0","code":""},{"path":"/reference/read_idea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read IDEA4 items and metadata — read_idea","text":"object class IDEA_items two attributes : metadata named list containing 17 metadata entries farm items tibble extracted 118 items found input","code":""},{"path":"/reference/read_idea.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read IDEA4 items and metadata — read_idea","text":"function designed import items farm metadata single IDEA data file. Errors produced input file contain \"metadonnees\" field case json file \"Notice\" sheet case excel file. R code developed according newest versions IDEA data collecting files (version numbers >= 4.2.0)  produce error version number lower 4.2.0 found 'Notice$K4' cell input case excel input. limitations json input files introduced version number 4.2.0. older versions (2019-01-01), can replace \" read_idea() |>  compute_idea() \" pipeline \"old_idea()\" focus indicators rather items.","code":""},{"path":"/reference/read_idea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read IDEA4 items and metadata — read_idea","text":"","code":"library(IDEATools) path <- system.file(\"example_data/idea_example_1.json\", package = \"IDEATools\") my_data <- read_idea(path) my_data #> $metadata #> $metadata$MTD_00 #> [1] \"4.2.1\" #>  #> $metadata$MTD_01 #> [1] \"100001\" #>  #> $metadata$MTD_02 #> [1] 77 #>  #> $metadata$MTD_03 #> [1] 2 #>  #> $metadata$MTD_04 #> [1] 0 #>  #> $metadata$MTD_05 #> [1] \"36-45\" #>  #> $metadata$MTD_06 #> [1] \"6184 - Polyculture et/ou polyélevage (et apiculture)\" #>  #> $metadata$MTD_07 #> [1] 0 #>  #> $metadata$MTD_08 #> [1] 647629 #>  #> $metadata$MTD_09 #> [1] 111703.5 #>  #> $metadata$MTD_10 #> [1] 64404.5 #>  #> $metadata$MTD_11 #> [1] \"32 - Gers\" #>  #> $metadata$MTD_12 #> [1] \"1\" #>  #> $metadata$MTD_13 #> [1] \"2019\" #>  #> $metadata$MTD_14 #> [1] \"1\" #>  #> $metadata$MTD_15 #> [1] 0 #>  #> $metadata$MTD_16 #> [1] \"1\" #>  #>  #> $items #> # A tibble: 118 × 2 #>    item  value #>    <chr> <int> #>  1 A1_1      3 #>  2 A1_2      0 #>  3 A2_1      0 #>  4 A2_2      2 #>  5 A2_3      0 #>  6 A3_1      0 #>  7 A4_1      1 #>  8 A4_2      0 #>  9 A5_1      2 #> 10 A5_2      0 #> # ℹ 108 more rows #>  #> attr(,\"class\") #> [1] \"list\"       \"IDEA_items\""},{"path":"/reference/runGUI.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimal Shiny app for IDEATools — runGUI","title":"Minimal Shiny app for IDEATools — runGUI","text":"function loads graphical user interface (GUI) use IDEATools.","code":""},{"path":"/reference/runGUI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimal Shiny app for IDEATools — runGUI","text":"","code":"runGUI()"},{"path":"/reference/runGUI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimal Shiny app for IDEATools — runGUI","text":"Loads shiny application","code":""},{"path":"/reference/runGUI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimal Shiny app for IDEATools — runGUI","text":"","code":"library(IDEATools)  ## Only run this example in interactive R sessions if (interactive()) {   runGUI() }"},{"path":"/reference/show_decision_rules.html","id":null,"dir":"Reference","previous_headings":"","what":"Show decision rules — show_decision_rules","title":"Show decision rules — show_decision_rules","text":"Show decision rules","code":""},{"path":"/reference/show_decision_rules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show decision rules — show_decision_rules","text":"","code":"show_decision_rules(directory)"},{"path":"/reference/show_decision_rules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show decision rules — show_decision_rules","text":"directory directory output decision rules","code":""},{"path":"/reference/show_decision_rules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show decision rules — show_decision_rules","text":"Exports excel file desired directory","code":""},{"path":"/reference/show_decision_rules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show decision rules — show_decision_rules","text":"","code":"library(IDEATools) show_decision_rules(tempdir())"},{"path":"/reference/show_tree_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the reference table used for building colored trees — show_tree_structure","title":"Show the reference table used for building colored trees — show_tree_structure","text":"Show reference table used building colored trees","code":""},{"path":"/reference/show_tree_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the reference table used for building colored trees — show_tree_structure","text":"","code":"show_tree_structure(directory)"},{"path":"/reference/show_tree_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the reference table used for building colored trees — show_tree_structure","text":"directory directory output reference tables","code":""},{"path":"/reference/show_tree_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the reference table used for building colored trees — show_tree_structure","text":"Exports excel file desired directory","code":""},{"path":"/reference/show_tree_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the reference table used for building colored trees — show_tree_structure","text":"","code":"library(IDEATools) show_tree_structure(tempdir())"},{"path":"/reference/theme_idea.html","id":null,"dir":"Reference","previous_headings":"","what":"IDEA ggplot2 theme — theme_idea","title":"IDEA ggplot2 theme — theme_idea","text":"IDEA ggplot2 theme","code":""},{"path":"/reference/theme_idea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IDEA ggplot2 theme — theme_idea","text":"","code":"theme_idea(base_size = 15, base_family = \"\")"},{"path":"/reference/theme_idea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IDEA ggplot2 theme — theme_idea","text":"base_size base size base_family base family","code":""},{"path":"/reference/theme_idea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IDEA ggplot2 theme — theme_idea","text":"ggplot2 theme IDEA","code":""},{"path":"/reference/write_idea.html","id":null,"dir":"Reference","previous_headings":"","what":"Write IDEA4 results and graphs to local disc — write_idea","title":"Write IDEA4 results and graphs to local disc — write_idea","text":"function allows user write IDEA4 results either local PNG files compiled reports.","code":""},{"path":"/reference/write_idea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write IDEA4 results and graphs to local disc — write_idea","text":"","code":"write_idea(   IDEA_plots,   output_directory,   type = c(\"local\", \"report\"),   prefix = NULL,   dpi = 320,   report_format = \"docx\",   append = FALSE,   input_file_append = NULL,   quiet = FALSE )"},{"path":"/reference/write_idea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write IDEA4 results and graphs to local disc — write_idea","text":"IDEA_plots IDEA_plots IDEA_group_plots object plot_idea() call. output_directory desired output directory rendered reports /plots. Defaults \"IDEATools_output\" type type output produce. Can either \"report\" produce compiled reports \"local\" write raw plots PNG files. prefix prefix added output files names. Typically, name farm. Ignored case group analysis : metadata$MTD_01 field used identify farm. dpi ggplot output resolution. report_format string indicating output format type = \"report\". Can single format (e.g \"pdf\") multiple formats (e.g. c(\"pdf\",\"xlsx\")). Possible formats \"pdf\", \"docx\", \"pptx\" \"xlsx\" append input xlsx format, individual output appended original file ? input_file_append file path xslx IDEA data spreadsheet quiet command remove console printing.","code":""},{"path":"/reference/write_idea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write IDEA4 results and graphs to local disc — write_idea","text":"Reports /raw plots output_directory.","code":""},{"path":"/reference/write_idea.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write IDEA4 results and graphs to local disc — write_idea","text":"function automatically creates output_directory subdirectory named system date users use output_directory multiple diagnosis. Inputs class IDEA_plots can generated classic read_idea() |> compute_idea() |> plot_idea() old_idea() |> plot_idea() individual analysis pipelines. Inputs class IDEA_group_plots can generated plot_idea() call group analysis conducted diag_idea. case individual analysis, another subdirectory created prefix name analyses mixed . user can choose output raw plots (can used custom reports) pre-compiled reports large variety available formats. case group analysis, another subdirectory created name like \"Groupe_number_of_farms\" analyses mixed . user can choose output raw plots pre-compiled reports. report_format argument set either \"docx\" \"pptx\", report rendered using rmarkdown package (officedown/officer packages docx output) using template stored package. \"pdf\" output, LaTeX called rmarkdown package. \"xlsx\" output, openxlsx package used sequentially produce Excel worksheets files, using internal R function. Please note error produced input object contain three \"dimensions\",\"trees\" \"radars\" entries case individual analysis type = \"report\".","code":""},{"path":"/reference/write_idea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write IDEA4 results and graphs to local disc — write_idea","text":"","code":"library(IDEATools) path <- system.file(\"example_data/idea_example_1.json\", package = \"IDEATools\") my_data <- read_idea(path) computed_data <- compute_idea(my_data) # Only plotting the radars as a minimal example idea_plots <- plot_idea(computed_data, choices = \"radars\")  # Find your temporary directory tempdir <- tempdir()  # Export as raw plots to your tempdir write_idea(idea_plots,   output_directory = tempdir,   type = \"local\",   prefix = \"myFarm\",   dpi = 20 # Can be much higher ) #> Production des 1 types de graphiques demandés #> Production des graphiques radars... #> Les graphiques radars ont été exportés à l'adresse '/tmp/RtmpTw6O94/2023-12-14/myFarm/Propriétés/Radars' (1s)"},{"path":"/news/index.html","id":"ideatools-352","dir":"Changelog","previous_headings":"","what":"IDEATools 3.5.2","title":"IDEATools 3.5.2","text":"Added word wrapping labels group reports Moved group dimensions boxplot legend right","code":""},{"path":"/news/index.html","id":"ideatools-351","dir":"Changelog","previous_headings":"","what":"IDEATools 3.5.1","title":"IDEATools 3.5.1","text":"CRAN release: 2023-08-29 Fixed 2 figure widths write_idea()","code":""},{"path":"/news/index.html","id":"ideatools-350","dir":"Changelog","previous_headings":"","what":"IDEATools 3.5.0","title":"IDEATools 3.5.0","text":"CRAN release: 2023-08-08 Changed logo documentation Updated indicator names based published book","code":""},{"path":"/news/index.html","id":"ideatools-342","dir":"Changelog","previous_headings":"","what":"IDEATools 3.4.2","title":"IDEATools 3.4.2","text":"CRAN release: 2023-04-24 Fixed error group reports","code":""},{"path":"/news/index.html","id":"ideatools-341-cran","dir":"Changelog","previous_headings":"","what":"IDEATools 3.4.1 (CRAN)","title":"IDEATools 3.4.1 (CRAN)","text":"CRAN release: 2023-03-27 Fixed error global tree Re-styled code using tidyverse style Fixed error occuring choosing trees plot choice","code":""},{"path":"/news/index.html","id":"ideatools-340","dir":"Changelog","previous_headings":"","what":"IDEATools 3.4.0","title":"IDEATools 3.4.0","text":"Fixes documentation Removed vignette showing dev history IDEATools associated images Droping heavy dependencies : janitor, scales, ggrepel, glue, readr, stringr especially dplyr tidyr New (light) dependency data.table Fixed bug excel reports properties labels Removed limit 3 group analysis Better dpi management PDF reports","code":""},{"path":"/news/index.html","id":"ideatools-331","dir":"Changelog","previous_headings":"","what":"IDEATools 3.3.1","title":"IDEATools 3.3.1","text":"Documentation fixes CRAN New logo PDF first page Removed ODT output reduce package size New metadata analysis group output New function group reference excel reports PDFs (used cases) Changes diag_idea() new “group_reference” type","code":""},{"path":"/news/index.html","id":"ideatools-330","dir":"Changelog","previous_headings":"","what":"IDEATools 3.3.0","title":"IDEATools 3.3.0","text":"New runGUI() function loads basic shiny app use package functions Switching magrittr pipes base ones (forces R > 4.1.0) Removed cli console printing remove dependence Moved packages Suggest check presence rlang::check_installed() Switched purrr::map() lapply() mapply() reduce dependencies New JSON examples illustrate group analysis Size reduction PDF covers","code":""},{"path":"/news/index.html","id":"ideatools-321","dir":"Changelog","previous_headings":"","what":"IDEATools 3.2.1","title":"IDEATools 3.2.1","text":"Better error messages diag_idea()","code":""},{"path":"/news/index.html","id":"ideatools-320","dir":"Changelog","previous_headings":"","what":"IDEATools 3.2.0","title":"IDEATools 3.2.0","text":"Update jsonify() function R object output default New PDF reports branded first pages Update README asking Helvetica font Added facets individual components graph Update DPI argument make relevant","code":""},{"path":"/news/index.html","id":"ideatools-311","dir":"Changelog","previous_headings":"","what":"IDEATools 3.1.1","title":"IDEATools 3.1.1","text":"Added new internal function, compile_diag()","code":""},{"path":"/news/index.html","id":"ideatools-310","dir":"Changelog","previous_headings":"","what":"IDEATools 3.1.0","title":"IDEATools 3.1.0","text":"Changed default font PDF reports Another update pkgdown","code":""},{"path":"/news/index.html","id":"ideatools-302","dir":"Changelog","previous_headings":"","what":"IDEATools 3.0.2","title":"IDEATools 3.0.2","text":"Attempt fix bug colored trees windows users Updated pkgdown architecture","code":""},{"path":"/news/index.html","id":"ideatools-301","dir":"Changelog","previous_headings":"","what":"IDEATools 3.0.1","title":"IDEATools 3.0.1","text":"Re-introduced PPTX output format Fixed bugs “Robustesse” “Global” trees Updated documentation","code":""},{"path":"/news/index.html","id":"ideatools-300","dir":"Changelog","previous_headings":"","what":"IDEATools 3.0.0","title":"IDEATools 3.0.0","text":"New major version New method used colored trees now based {ggplot2} syntax internal reference tables lines nodes coordinates. removes {rsvg} dependency adds dependency {ggtext}. Changed internal “reference” concept, “reference_table” “reference_list” Updated pdf reports reintroducing LaTeX removing {pagedown} dependency Updated pdf, xlsx, docx odt reports new colored trees Removed html pptx outputs Created new vignette utilities jsonify() removed internal “canvas” object, linked old SVG approach colored trees Fixed 4.3.3 excel IDEA calculator compatibility","code":""},{"path":"/news/index.html","id":"ideatools-208","dir":"Changelog","previous_headings":"","what":"IDEATools 2.0.8","title":"IDEATools 2.0.8","text":"Added new compatibility 4.3.3 version IDEA calculator spreadcheet (json/xls/xlsx)","code":""},{"path":"/news/index.html","id":"ideatools-207","dir":"Changelog","previous_headings":"","what":"IDEATools 2.0.7","title":"IDEATools 2.0.7","text":"Changed error message occuring read_idea() fails diag_idea() added better easier maintain check NA’s output read_idea() New categorisation rules indicators New computation rules items","code":""},{"path":"/news/index.html","id":"ideatools-206","dir":"Changelog","previous_headings":"","what":"IDEATools 2.0.6","title":"IDEATools 2.0.6","text":"Bug fixes modifying plot_idea() unofficial hack <ggplot_object> + ggsave() work anymore.","code":""},{"path":"/news/index.html","id":"ideatools-205","dir":"Changelog","previous_headings":"","what":"IDEATools 2.0.5","title":"IDEATools 2.0.5","text":"Added new compatibility 4.3.1 version IDEA calculator spreadcheet (json/xls/xlsx)","code":""},{"path":"/news/index.html","id":"ideatools-204","dir":"Changelog","previous_headings":"","what":"IDEATools 2.0.4","title":"IDEATools 2.0.4","text":"Added new compatibility 4.3.0 version IDEA calculator spreadcheet (json/xls/xlsx)","code":""},{"path":"/news/index.html","id":"ideatools-203","dir":"Changelog","previous_headings":"","what":"IDEATools 2.0.3","title":"IDEATools 2.0.3","text":"New Feature : Frequency plot group analysis properties","code":""},{"path":"/news/index.html","id":"ideatools-202","dir":"Changelog","previous_headings":"","what":"IDEATools 2.0.2","title":"IDEATools 2.0.2","text":"Fixed bug causing A7 considered “NC” properties approach (due mis-reading MTD_14) Fixed bug causing new excel files considered “old” MTD_15 generated error divided 100 imported character.","code":""},{"path":"/news/index.html","id":"ideatools-201","dir":"Changelog","previous_headings":"","what":"IDEATools 2.0.1","title":"IDEATools 2.0.1","text":"Fixed bug excel individual reports","code":""},{"path":"/news/index.html","id":"ideatools-20","dir":"Changelog","previous_headings":"","what":"IDEATools 2.0","title":"IDEATools 2.0","text":"New version line CRAN requirements Major code refactoring, functions changed 5 modules (read > compute > old > plot > write) 1 wrapper function (diag_idea)","code":""},{"path":"/news/index.html","id":"ideatools-11","dir":"Changelog","previous_headings":"","what":"IDEATools 1.1","title":"IDEATools 1.1","text":"Added NEWS.md file track changes package. Added two new functions PDF reporting : MakeReport() MakeGroupReport Added two new functions Excel reporting : MakeExcel() MakeGroupExcel adds new dependency openxlsx Added new wrapper function, DiagIDEA() allows users complete full IDEA diagnostic one line code. NOTE : function yet implement new excel pdf reporting functions. Added new pkgdown site","code":""}]
